name: Generate Release Notes

on:
  workflow_dispatch: # Permite ejecutar el workflow manualmente

jobs:
  generate-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # 3. Instalar dependencias necesarias
      - name: Install dependencies
        run: npm install @octokit/graphql

      # 4. Generar las release notes usando GraphQL
      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          node <<EOF
          const { graphql } = require("@octokit/graphql");
          const fs = require("fs");

          (async () => {
            const graphqlWithAuth = graphql.defaults({
              headers: {
                authorization: `token ${process.env.GITHUB_TOKEN}`,
              },
            });

            const query = `
              query ($projectId: ID!, $first: Int!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: $first) {
                      nodes {
                        content {
                          ... on Issue {
                            number
                            title
                            url
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              projectId: "PVT_kwHOClz1qM1r8g", // ID del proyecto (ajústalo según corresponda)
              first: 100, // Número máximo de issues a obtener
            };

            try {
              const response = await graphqlWithAuth(query, variables);
              const issues = response.node.items.nodes
                .filter(item => item.content) // Filtrar solo los elementos con contenido
                .map(issue => `- [#${issue.content.number}](${issue.content.url}) ${issue.content.title}`)
                .join("\n");

              const releaseNotes = `# Release Notes\n\n${issues}`;

              // Escribir el archivo RELEASE_NOTES.md
              fs.writeFileSync("RELEASE_NOTES.md", releaseNotes);

              // Actualizar el README.md para incluir el enlace
              const readmePath = "README.md";
              let readmeContent = fs.existsSync(readmePath) ? fs.readFileSync(readmePath, "utf8") : "";
              const releaseNotesLink = "\n\n[Release Notes](./RELEASE_NOTES.md)";
              if (!readmeContent.includes(releaseNotesLink)) {
                readmeContent += releaseNotesLink;
                fs.writeFileSync(readmePath, readmeContent);
              }
            } catch (error) {
              console.error("Error fetching issues:", error);
              process.exit(1);
            }
          })();
          EOF
